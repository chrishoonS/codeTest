

/****************************************************************************************************************************************************/
/*
DOM 트리에서 요소의 탐색을 위해 사용되는 기타 메서드는 다음과 같습니다.
.add() : 선택한 요소의 집합에 전달받은 요소를 추가
*/
$(function() {
    $("button").on("click", function() {
        $("li").add("p")                         // 선택한 <li>요소의 집합에 <p>요소를 추가함.
            .css({"border": "2px solid green"}); // 해당 요소의 CSS 스타일을 변경
    });
});

$(function() {
    $("button").on("click", function() {
        $("#list").append("<li>새로 추가된 아이템이에요!</li>");
    });
});

// 위의 예제에서 알 수 있듯이 .add() 메서드는 선택한 '요소의 집합'에 인수로 전달받은 요소를 추가하는 메서드
// 하지만 .append() 메서드는 선택한 '요소'의 마지막에 새로운 요소나 콘텐츠를 추가

// .each() : 선택한 요소 집합의 요소마다 전달받은 콜백 함수를 실행
$(function() {
    $("button").on("click", function() {
        $("li").each(function() {            // 선택한 <li>요소 집합의 각 <li>요소를 선택함.
            $(this).toggleClass("boldFont"); // 각 <li>요소마다 클래스를 추가하거나 제거함.
        });
    });
});
// 위의 예제는 선택한 <li>요소 집합의 각 <li>요소에 .each() 메서드를 사용하여 클래스를 추가하거나 제거하는 예제
// 이처럼 .each() 메서드를 사용하면, 선택한 요소 집합의 각 요소마다 콜백 함수를 따로 실행가능

// .end() : 마지막으로 실행한 메서드의 실행 전 상태로 선택한 요소의 집합을 복원해 줍니다.
$(function() {
    $("button").on("click", function() {
        $("#divBox")     // id가 "divBox"인 요소의
            .find("p")   // 자손 요소 중에서 <p>요소를 모두 선택하고,
            .end()       // 선택된 요소의 집합을 find() 메서드의 실행 전으로 복원함.
            .css("border", "2px solid green"); // 따라서 id가 "divBox"인 요소의 CSS 스타일을 설정함.
    });
});

// 위의 예제에서 만약 .end() 메서드가 없다면, 아이디가 "divBox"인 요소의 자손 요소 중에서 모든 <p>요소에 스타일을 설정하게 될 것입니다.

// .offsetParent() : 선택한 요소를 위치시킬 때 기준으로 사용된 조상 요소를 선택 가능
$(function() {
    $("button").on("click", function() {
        // id가 "para"인 요소가 위치할 때 기준이 된 조상 요소를 선택함.
        $("#para").offsetParent()
            .css("border", "1px solid red"); // 해당 요소의 CSS 스타일을 변경
    });
});
// 위의 예제에서 아이디가 "para"인 요소를 웹 페이지에 위치시킬 때 기준이 되는 부모 요소는 position 속성값이 relative로 설정된 <ul>요소입니다.
// 이렇게 정적 위치(static position) 지정 방식을 제외한 다른 방식(relative, fixed, absolute)으로 위치가 설정된 요소가 위치를 정할 때 기준
// 만약 위와 같은 위치가 설정된 요소가 존재하지 않으면, <html>요소를 기준으로 함!!

// .contents() : 선택한 요소의 자식(child) 요소를 텍스트 노드와 주석 노드까지 모두 포함하여 선택해 줍니다.
$(function() {
    $("button").on("click", function() {
        $("iframe")     // <iframe>요소의
            .contents() // 자식 요소를 모두 선택한 후,
            .find("a")  // 그 중에서 <a>요소를 모두 선택하고,
            .css("backgroundColor", "aqua"); // 선택된 모든 <a>요소의 CSS 스타일을 설정함.
    });
});
// 위의 예제는 <iframe>요소의 모든 자식 요소를 선택한 후, 그 중에서 <a>요소만의 CSS 스타일을 변경하는 예제
// 버튼을 누르면, <iframe>요소에 로드된 모든 자식 요소 중 <a>요소의 배경색만이 변경될 것입니다.
// 이처럼 제이쿼리의 .contents() 메서드를 사용하면, <iframe>요소의 내용에도 직접 접근 가능
/****************************************************************************************************************************************************/
/****************************************************************************************************************************************************/
/*
필터링(filtering) 메서드
DOM 트리에서 선택한 요소를 필터링하기 위한 메서드는 다음과 같습니다.

.first() : 선택한 요소 중 첫 번째 요소를 선택
.last()  : 선택한 요소 중 마지막 요소를 선택
*/
$(function() {
    $("#firstBtn").on("click", function() {
        $("li").first()                           // 선택한 <li>요소 중에서 첫 번째 요소만을 선택함.
            .css({"border": "2px solid green"});  // 해당 요소의 CSS 스타일을 변경
    });

    $("#lastBtn").on("click", function() {
        $("li").last()                            // 선택한 <li>요소 중에서 마지막 요소만을 선택함.
            .css({"border": "2px solid orange"}); // 해당 요소의 CSS 스타일을 변경
    });
});

// .eq() : 선택한 요소 중에서 전달받은 인덱스에 해당하는 요소를 선택
$(function() {
    $("#clockwiseBtn").on("click", function() {
        $("li").eq(1)                             // 선택한 <li>요소 중에서 두 번째 요소만을 선택함.
            .css({"border": "2px solid green"});  // 해당 요소의 CSS 스타일을 변경
    });

    $("#counterBtn").on("click", function() {
        $("li").eq(-1)                            // 선택한 <li>요소 중에서 뒤에서부터 첫 번째 요소만을 선택함.
            .css({"border": "2px solid orange"}); // 해당 요소의 CSS 스타일을 변경
    });
});
// 위의 예제처럼 .eq() 메서드는 음의 정수도 인수로 전달받을 수 있습니다.
// 이때는 선택한 요소 집합의 맨 마지막 요소를 인덱스 -1로 놓고, 뒤에서부터 검색

// .filter() : 선택한 요소 중에서 전달받은 선택자에 해당하거나, 함수 호출의 결과가 참(true)인 요소를 모두 선택
// 이 메서드는 인수로 선택자나 제이쿼리 객체, HTML DOM 요소 등을 전달받을 수 있습니다.
// 또한, 요소 집합의 각 요소를 검사할 수 있는 함수를 전달할 수도 있습니다.
$(function() {
    $("button").on("click", function() {
        $("li").filter(":odd")                   // 선택한 <li>요소 중에서 인덱스가 홀수인 요소만을 선택함.
            .css({"border": "2px solid green"}); // 해당 요소의 CSS 스타일을 변경
    });
});

// :odd 선택자는 인덱스가 홀수인 요소를 모두 선택하는 선택자입니다.
// 하지만 위의 예제에서 :odd 선택자는 두 번째와 네 번째 요소를 선택해 줍니다.
// 이것은 제이쿼리의 인덱스가 언제나 0부터 시작하기 때문입니다.
// 따라서 :odd나 :even 선택자를 사용할 때는 언제나 인덱스가 0부터 시작한다는 사실을 염두에 두고 사용

// .not() : 선택한 요소 중에서 전달받은 선택자에 해당하거나, 함수 호출의 결과가 참(true)인 요소를 제외한 나머지 요소를 모두 선택
// 즉, .filter() 메서드와는 정반대로 동작하여 요소를 선택
$(function() {
    $("button").on("click", function() {
    // 선택한 <li>요소 중에서 인덱스가 2보다 작지 않은 요소만을 선택함.
    $("li").not(":lt(2)")
        .css({"border": "2px solid green"}); // 해당 요소의 CSS 스타일을 변경
    });
});
// 위의 예제에서 .not() 메서드에 인수로 전달된 식별자는 '인덱스가 2보다 작은'이라는 의미를 가지는 식별자
// 따라서 .not() 메서드는 인덱스가 2보다 작지 않은, 즉 인덱스가 2인 요소와 2보다 큰 요소를 모두 선택해 줍니다.

// .has() : 선택한 요소 중에서 전달받은 선택자에 해당하는 요소를 자손 요소로 가지고 있는 요소를 모두 선택
// 다음 예제는 선택한 <li>요소 중에서 자손 요소로 <span>요소를 가지고 있는 요소만의 스타일을 변경하는 예제
$(function() {
    $("button").on("click", function() {
        // 선택한 <li>요소 중에서 자손 요소로 <span>요소를 가지고 있는 요소만을 선택함.
        $("li").has("span")
            .css({"border": "2px solid green"}); // 해당 요소의 CSS 스타일을 변경
    });
});

// .is() 메서드는 선택한 요소 중에서 전달받은 선택자에 해당하는 요소가 하나라도 존재하면 참을 반환
$(function() {
    $("button").on("click", function() {
        // 선택한 <span>요소의 조상 요소 중에서 <ul>요소가 하나라도 존재하면 true를 반환함.
        if ($("span").parents().is("ul")) {
            $("#text").html("span 요소의 조상 요소에는 ul 요소도 존재합니다.");
        }
    });
});

// 위의 예제에서는 우선 선택한 <span>요소의 모든 조상 요소를 다시 선택
// 그리고서 선택된 모든 조상 요소 중에 <ul>요소가 존재하는지 여부를 .is() 메서드를 통해 검사하고 있습니다.

// .map() : 선택한 요소 집합의 각 요소마다 지정된 콜백 함수를 실행하고, 그 반환값으로 구성된 제이쿼리 객체를 반환
$(function() {
    $("button").on("click", function() {
        // 선택한 <li>요소마다 콜백함수를 실행하여 각 <li>요소의 id 값을 반환함.
        let ids = $("li").map(function() {
            return this.id;
        })
        .get()   // 반환된 모든 id 값을 하나의 배열로 반환함.
        .join(); // 배열의 모든 요소를 쉼표(,)로 구분하는 하나의 문자열로 반환함.
        $("#text").html(ids);
    });
});
// 위의 예제는 선택한 <li>요소 집합의 각 요소마다 해당 요소의 id 값을 반환하는 콜백함수를 실행
// 콜백함수의 실행으로 반환되는 값들은 .get() 메서드를 통해 하나의 배열로 반환되며, 다시 .join() 메서드를 통해 하나의 문자열로 변환되어 반환

// .slice() : 선택한 요소 중에서 전달받은 인덱스 범위에 해당하는 요소만을 선택

// 다음 예제는 선택한 <li>요소 중에서 인덱스가 1과 같거나 그 이상인 요소만의 스타일을 변경하는 예제
$(function() {
    $("button").on("click", function() {
        // 선택한 <li>요소 중에서 인덱스가 1과 같거나 그 이상인 요소만을 선택함.
        $("li").slice(1)
            .css({"border": "2px solid green"}); // 해당 요소의 CSS 스타일을 변경
    });
});
/****************************************************************************************************************************************************/

/****************************************************************************************************************************************************/
/*
요소의 크기
제이쿼리는 선택한 요소의 크기에 관한 정보를 손쉽게 받아오거나 설정할 수 있도록 다양한 메서드를 제공

inner와 outer
제이쿼리에서 요소의 크기는 다음과 같이 구성됩니다.(사이트 구성도 참조)

요소의 크기
접두사로 inner가 붙은 메서드는 선택한 요소의 크기에 패딩(padding) 영역이 포함된 크기 정보를 반환
접두사로 outer가 붙은 메서드는 패딩 영역뿐만 아니라 테두리(border) 영역까지 포함된 크기 정보를 반환
또한, 접두사로 outer가 붙은 메서드에 인수로 true 값을 전달하면, 패딩과 테두리 영역뿐만 아니라 마진(margin) 영역까지 포함된 크기 정보를 반환

메서드	반환값
.width(), .height()	            요소의 크기
.innerWidth(), .innerHeight()	요소의 크기 + 패딩(padding)의 크기
.outerWidth(), .outerHeight()	요소의 크기 + 패딩의 크기 + 테두리(border)의 크기
.outerWidth(true), .outerHeight(true)	요소의 크기 + 패딩의 크기 + 테두리의 크기 + 마진(margin)의 크기
*/

/*
.width()와 .height() 메서드
.width() : 선택한 요소 집합의 첫 번째 요소의 너비를 반환하거나, 선택된 요소의 너비를 전달된 값으로 설정
.height() : .width() 메서드와 같은 동작을 높이에 대해 실행
*/
$(function() {

    $("button").on("click", function() {
        let str = "이 div 요소의 ";
        str += "너비는 " + $("#divBox").width() + "픽셀이고,<br>"; // id가 "divBox"인 요소의 너비를 반환함.
        str += "높이는 " + $("#divBox").height() + "픽셀입니다."   // id가 "divBox"인 요소의 높이를 반환함.
        $("#text").html(str);
    });
});

// 이 메서드들을 이용하면 브라우저의 뷰포트(viewport)나 HTML 문서의 크기도 알아낼 수 있습니다.
$(function() {
    $("button").on("click", function() {
        let str = "";
        str += "브라우저 뷰포트의 크기는 " + $(window).width() + "X" + $(window).height() + "입니다.<br>";
        str += "HTML 문서의 크기는 " + $(document).width() + "X" + $(document).height() + "입니다.";
        $("#text").html(str);
    });
});

// .width()와 .height() 메서드가 호출될 때 인수를 전달받으면, 선택된 요소의 크기를 인수로 전달받은 값으로 설정
$(function() {
    $("button").on("click", function() {
        $("#divBox").width("400");  // id가 "divBox"인 요소의 너비를 설정함.
        $("#divBox").height("200"); // id가 "divBox"인 요소의 높이를 설정함.
    });
});

$(function() {
    $("button").on("click", function() {
        let str = "이 div 요소의 ";
        // id가 "divBox"인 요소의 크기를 반환함.
        str += "크기는 " + $("#divBox").width() + "X" + $("#divBox").height() + "이고,<br>";
        // id가 "divBox"인 요소의 패딩 영역을 포함한 크기를 반환함.
        str += "패딩 영역을 포함한 크기는 " + $("#divBox").innerWidth() +
            "X" + $("#divBox").innerHeight() + "이고,<br>";
        // id가 "divBox"인 요소의 패딩 영역과 테두리를 포함한 크기를 반환함.
        str += "테두리까지 포함한 크기는 " + $("#divBox").outerWidth() +
            "X" + $("#divBox").outerHeight() + "이고,<br>";
        // id가 "divBox"인 요소의 패딩 영역과 테두리, 마진 영역까지 포함한 크기를 반환함.
        str += "마진 영역까지 포함한 크기는 " + $("#divBox").outerWidth(true) +
            "X" + $("#divBox").outerHeight(true) + "입니다.";
        $("#text").html(str);
    });
});

/*
.width()
선택한 요소 집합의 첫 번째 요소의 너비를 반환하거나, 선택된 요소의 너비를 인수로 전달받은 값으로 설정함.

.height()
선택한 요소 집합의 첫 번째 요소의 높이를 반환하거나, 선택된 요소의 높이를 인수로 전달받은 값으로 설정함.

.innerWidth()
선택한 요소 집합의 첫 번째 요소의 너비에 패딩 영역을 포함한 너비를 반환함.

.innerHeight()
선택한 요소 집합의 첫 번째 요소의 높이에 패딩 영역을 포함한 높이를 반환함.

.outerWidth()
선택한 요소 집합의 첫 번째 요소의 너비에 패딩 영역과 테두리를 포함한 너비를 반환함.
또한, 인수로 true를 전달받으면 마진 영역까지 포함한 너비를 반환함.

.outerHeight()
선택한 요소 집합의 첫 번째 요소의 높이에 패딩 영역과 테두리를 포함한 높이를 반환함.
또한, 인수로 true를 전달받으면 마진 영역까지 포함한 높이를 반환함.
 */

/****************************************************************************************************************************************************/

/*
요소의 위치
요소의 위치
제이쿼리는 선택한 요소의 위치 정보를 손쉽게 얻을 수 있도록 다양한 메서드를 제공합니다.

.offset() 메서드와 .position() 메서드
.offset() 메서드는 선택한 요소 집합의 첫 번째 요소의 위치를 HTML 문서를 기준으로 반환
또한, .offset() 메서드가 호출될 때 인수를 전달받으면, 선택한 요소의 위치를 인수로 전달받은 값으로 설정
*/
$(function() {
    $("button").on("click", function() {
        let paraPosition = $("#para").offset(); // id가 "para"인 요소의 위치 정보를 저장함.
        let str = "p 요소의 위치는 ";
        str += "left가 " + paraPosition.left + "픽셀이고,<br>"; // id가 "para"인 요소의 left 위치를 반환함.
        str += "top은 " + paraPosition.top + "픽셀입니다.";     // id가 "para"인 요소의 top 위치를 반환함.
        $("#text").html(str);
    });
});

$(function() {
    $("button").on("click", function() {
        $("#para").offset({ top: 200, left: 100 }); // id가 "para"인 요소의 위치를 설정함.
        let paraPosition = $("#para").offset();     // id가 "para"인 요소의 위치 정보를 저장함.
        let str = "p 요소의 위치는 ";
        str += "left가 " + paraPosition.left + "픽셀이고,<br>"; // id가 "para"인 요소의 left 위치를 반환함.
        str += "top은 " + paraPosition.top + "픽셀입니다.";     // id가 "para"인 요소의 top 위치를 반환함.
        $("#text").html(str);
    });
});

/*
.position() 메서드
.offset() 메서드와는 달리, 선택한 요소가 웹 페이지에 위치할 때 기준이 되었던 부모 요소(offset parent)를 기준으로 하는 상대 위치를 반환
*/
$(function() {
    $("button").on("click", function() {
        let str = "";
        let offsetPosition = $("#para").offset(); // offset() 메서드를 사용해 id가 "para"인 요소의 위치 정보

        str += "offset() 메서드를 사용해 구한 p 요소의 위치는<br>";
        str += "left가 " + offsetPosition.left + "픽셀이고, ";    // id가 "para"인 요소의 left 위치를 반환함.
        str += "top은 " + offsetPosition.top + "픽셀입니다.<br>"; // id가 "para"인 요소의 top 위치를 반환함.

        let posPosition = $("#para").position();  // position() 메서드를 사용해 id가 "para"인 요소의 위치 정보

        str += "position() 메서드를 사용해 구한 p 요소의 위치는<br>";
        str += "left가 " + posPosition.left + "픽셀이고, ";       // id가 "para"인 요소의 left 위치를 반환함.
        str += "top은 " + posPosition.top + "픽셀입니다.";        // id가 "para"인 요소의 top 위치를 반환함.

        $("#text").html(str);
    });
});

/*
.offset() 메서드와 .position() 메서드의 차이점
.offset() 메서드
HTML 문서(HTML document)를 기준으로 함.

.position() 메서드
선택한 요소가 웹 페이지에 위치할 때 기준이 되는 부모 요소를 기준으로 함.

기준이 되는 조상 요소
.position() 메서드에서 기준으로 사용되는 부모 요소는 .offsetParent() 메서드를 사용하여 확인할 수 있습니다.
*/

$(function() {
    $("button").on("click", function() {
        // id가 "para"인 요소가 위치할 때 기준이 된 조상 요소를 선택함.
        $("#para").offsetParent()
            .css("border", "1px solid red"); // 해당 요소의 CSS 스타일을 변경함.
    });
});

// 위의 예제에서 아이디가 "para"인 요소를 웹 페이지에 위치시킬 때 기준이 되는 부모 요소는 position 속성값이 relative로 설정된 <ul>요소
// 이렇게 정적 위치(static position) 지정 방식을 제외한 다른 방식(relative, fixed, absolute)으로 위치가 설정된 요소가 위치를 정할 때 기준이 될 수 있음
// 만약 위와 같은 위치가 설정된 요소가 존재하지 않으면, <html>요소를 기준

/*
.scrollLeft() 메서드와 .scrollTop() 메서드
.scrollLeft() 메서드는 선택한 요소 집합의 첫 번째 요소의 수평 스크롤 바의 현재 위치를 얻거나, 해당 요소의 수평 스크롤 바의 위치를 인수로 전달받은 값으로 설정
또한, .scrollTop() 메서드는 선택한 요소 집합의 첫 번째 요소의 수직 스크롤 바의 현재 위치를 얻거나, 해당 요소의 수직 스크롤 바의 위치를 인수로 전달받은 값으로 설정
*/

$(function() {
    $("button").on("click", function() {
        // id가 "divBox"인 요소의 수평 스크롤 바의 현재 위치를 반환함.
        let str = "수평 스크롤 바의 현재 위치는 left 방향으로 " + $("#divBox").scrollLeft() + "픽셀이고,<br>";
        // id가 "divBox"인 요소의 수직 스크롤 바의 현재 위치를 반환함.
        str += "수직 스크롤 바의 현재 위치는 top 방향으로 " + $("#divBox").scrollTop() + "픽셀입니다.";
        $("#text").html(str);
    });
});
// 위 예제는 아이디가 divBox인 요소의 수평 스크롤 바와 수직 스크롤 바의 현재 위치를 출력하는 예제

$(function() {
    $("button").on("click", function() {
        $("#divBox").scrollLeft(70); // id가 "divBox"인 요소의 수평 스크롤 바의 위치를 설정함.
        $("#divBox").scrollTop(200); // id가 "divBox"인 요소의 수직 스크롤 바의 위치를 설정함.

        // id가 "divBox"인 요소의 수평 스크롤 바의 현재 위치를 반환함.
        let str = "수평 스크롤 바의 현재 위치는 left 방향으로 " + $("#divBox").scrollLeft() + "픽셀이고,<br>";
        // id가 "divBox"인 요소의 수직 스크롤 바의 현재 위치를 반환함.
        str += "수직 스크롤 바의 현재 위치는 top 방향으로 " + $("#divBox").scrollTop() + "픽셀입니다.";
        $("#text").html(str);
    });
});
// 위 예제는 아이디가 divBox인 요소의 수평 스크롤 바와 수직 스크롤 바의 위치를 직접 설정하는 예제입니다.

/*
.offset()
선택한 요소 집합의 첫 번째 요소의 위치를 HTML 문서를 기준으로 반환하거나, 선택한 요소의 위치를 인수로 전달받은 값으로 설정함.

.position()
선택한 요소 집합의 첫 번째 요소의 위치를 해당 요소가 웹 페이지에 위치할 때 기준이 되었던 부모 요소를 기준으로 하는 상대 위치를 반환함.

.scrollLeft()
선택한 요소 집합의 첫 번째 요소의 수평 스크롤 바의 위치를 얻거나, 선택된 요소의 수평 스크롤 바의 위치를 인수로 전달받은 값으로 설정함.

.scrollTop()	선택한 요소 집합의 첫 번째 요소의 수직 스크롤 바의 위치를 얻거나, 선택된 요소의 수직 스크롤 바의 위치를 인수로 전달받은 값으로 설정함.
 */

/****************************************************************************************************************************************************/

/*
프로퍼티 설정
CSS 스타일 설정
.css() 메서드
제이쿼리에서는 .css() 메서드를 사용하여 선택한 요소의 CSS 스타일을 간단하게 설정 가능

.css() 메서드는 선택한 요소 집합의 첫 번째 요소의 스타일 속성값을 반환하거나, 선택한 요소의 스타일 속성을 인수로 전달받은 값으로 설정
*/

$(function() {
    $("button").on("click", function() {
        $("p").css("fontSize", "25px");          // 모든 <p>요소의 글씨 크기를 25px로 설정함.
        $("#text").html($("p").css("fontSize")); // 첫 번째 <p>요소의 글씨 크기를 반환함.
    });
});

// 위의 예제에서 사용된 첫 번째 .css() 메서드는 선택한 요소의 글씨 크기를 25px로 설정
// 하지만 두 번째로 사용된 .css() 메서드는 선택한 요소의 글씨 크기 값을 반환해 주는 역할
// .css() 메서드를 사용하면 선택한 요소의 스타일에 관한 여러 속성값을 한 번에 설정 가능

$(function() {
    $("button").on("click", function() {
        $("p").css({
            fontSize: "25px",         // 모든 <p>요소의 글씨 크기를 25px로 설정함.
            backgroundColor: "yellow" // 모든 <p>요소의 배경색을 노란색으로 설정함.
        });
    });
});

// 자바스크립트에서는 하이픈(-)으로 연결된 CSS 속성 명을 사용할 때, 하이픈(-)을 제거하고 이름을 camelCase 방식으로 바꿔서 사용해야 함.
// 제이쿼리의 .css() 메서드에서는 하이픈(-)으로 연결된 CSS 속성 명과 camelCase 방식의 속성 명을 둘 다 사용 가능

$(function() {
    $("#fontSize").on("click", function() {
        $("p").css("fontSize", "25px"); // 자바스크립트와 제이쿼리 둘 다 사용할 수 있음.
    });

    $("#backgroundColor").on("click", function() {
        $("p").css("background-color", "red"); // 제이쿼리에서만 사용할 수 있음.
    });
});

/*
프로퍼티 설정
.attr() 메서드
선택한 요소 집합의 첫 번째 요소의 지정된 속성(attribute)값을 반환하거나, 선택한 요소의 지정된 속성을 전달받은 값으로 설정
*/

$(function() {
    $("#setBtn").on("click", function() {
        $("#word").attr("title", "즐거운 제이쿼리 수업이에요~") // id가 "word"인 요소에 title 속성을 설정함.
        .css("color", "red");                                   // 해당 요소의 CSS 스타일을 설정함.
    });
    $("#removeBtn").on("click", function() {
        $("#word").removeAttr("title") // 해당 요소에서 title 속성을 제거함.
            .css("color", "black");
    });
});

/*
.prop() 메서드
제이쿼리 1.6부터 새롭게 정의된 메서드
이 메서드는 선택한 요소 집합의 첫 번째 요소의 지정된 프로퍼티(property)값을 반환하거나, 선택한 요소의 지정된 프로퍼티를 전달받은 값으로 설정
*/

$(function() {
    $("#setBtn").on("click", function() {
        $("input[value='jquery']").prop({ // <input>요소 중에서 value 값이 "jquery"인 요소를 선택한 후
            checked: true                 // 해당 요소에 checked 프로퍼티를 true 값으로 설정함.
        });
    });

    $("#removeBtn").on("click", function() {
        $("input[value='jquery']").removeProp("checked"); // 해당 요소에서 checked 프로퍼티를 삭제함.
    });
});

/*
속성(attribute)과 프로퍼티(property)의 차이점
속성(attribute)이란 HTML 요소의 추가적인 정보를 가지고 있는 이름과 값의 한 쌍을 의미
*/

// 다음의 <input>요소는 checked라는 속성(attribute)을 가지고 있으며, 그 속성값은 "checked"입니다.
// <input id="check" type="checkbox" name="lecture" checked="checked">

/*
프로퍼티(property)란 위와 같은 속성을 객체화하였을 때의 HTML DOM 트리 내부에서의 값을 가리킵니다.
위의 예제에서 만약 해당 체크박스가 체크되면 <check>노드의 프로퍼티 값은 "true"가 되는 것입니다.
즉, 속성은 HTML 문서에 존재하고 값이 변하지 않으며, 프로퍼티는 HTML DOM 트리에 존재하고 그 값이 변할 수 있습니다.

예를 들어, 사용자가 HTML 문서에 있는 <input>요소를 체크하거나 자바스크립트를 이용해 값을 변경하면, 속성값은 변하지 않지만 프로퍼티의 값은 변하게 되는 것입니다.

.attr() 메서드와 .prop() 메서드와의 차이점
제이쿼리 1.6 이전에는 .attr() 메서드를 사용할 때 부정확한 동작을 일으키는 몇몇 속성에 대해 해당 프로퍼티 값까지 고려해서 코드를 작성해야 했음
하지만 제이쿼리 1.6부터 .attr() 메서드는 속성만을 다루게 하고, 새롭게 제공되는 .prop() 메서드를 이용하여 프로퍼티 값을 다루는 방법으로 위와 같은 문제점을 해결
*/


$(function() {
    $("#check").change(function() {
        // checked 속성의 속성값을 반환함.
        $("#text").html("checked 속성의 속성값 : " + $(this).attr("checked") +
        "<br>checked 프로퍼티 값 : " + $(this).prop("checked")); // checked 프로퍼티 값을 반환함.
    }).change(); // 값이 변할 때마다 갱신함.
});

/****************************************************************************************************************************************************/

/*
클래스 설정
HTML 요소의 class 속성은 여러 개의 class 값을 가질 수 있습니다.

제이쿼리는 HTML 요소의 class 속성값을 손쉽게 다루기 위한 여러 메서드를 제공합니다.

이를 통해 class 속성에 적용되는 CSS 스타일이 동적으로 적용되게 할 수 있습니다.



1. .addClass()

2. .removeClass()

3. .toggleClass()

4. .hasClass()

클래스의 추가 및 제거
.addClass() 메서드로 클래스를 간단히 추가하고, .removeClass() 메서드로 클래스를 손쉽게 제거할 수 있습니다.

예제
$(function() {

    $("#addBtn").on("click", function() {

        // id가 "first"와 "third"인 요소에 "lined"라는 클래스를 추가함.

        $("#first, #third").addClass("lined");

    });

    $("#removeBtn").on("click", function() {

        // id가 "first"와 "third"인 요소가 "lined"라는 클래스에 포함되면 해당 클래스를 제거함.

        $("#first, #third").removeClass("lined");

    });

});





단순히 클래스만을 추가하는 것이 아니라 클래스에 미리 스타일을 설정하여, 해당 클래스에 속한 모든 요소에 한꺼번에 적용하는 것입니다.

또한, .toggleClass() 메서드를 이용하여 클래스의 추가와 제거를 번갈아 시행할 수도 있습니다.



다음 예제는 .toggleClass() 메서드를 이용하여 위의 예제를 더욱 간결하게 만든 예제입니다.

예제
$(function() {

    $("button").on("click", function() {

        // id가 "first"와 "third"인 요소에 "lined"라는 클래스를 추가하고, 다시 한 번 클릭하면 제거함.

        $("#first, #third").toggleClass("lined");

    });

});



클래스의 확인
.hasClass() 메서드를 이용하여 해당 요소가 특정 클래스에 포함되어 있는지를 확인할 수 있습니다.

예제
$(function() {

    $("button").on("click", function() {

        // id가 "target"인 요소가 "lined"라는 클래스에 포함되면 true를, 포함되지 않으면 false를 반환함.

        var result = $("#target").hasClass("lined");

        $("#text").html(result);

    });

});



클래스 설정에 관한 메서드
메서드	설명
.addClass()

선택한 요소에 인수로 전달받은 클래스를 추가함.
.removeClass()

선택한 요소에서 인수로 전달받은 클래스를 제거함.
.ToggleClass()

선택한 요소에 클래스가 없으면 인수로 전달받은 클래스를 추가하고, 전달받은 클래스가 추가되어 있으면 제거함.
.hasClass()	인수로 전달받은 값이 선택한 요소의 클래스 이름과 일치하는지를 확인함.
 */
/****************************************************************************************************************************************************/
/****************************************************************************************************************************************************/
/*
이벤트의 개념
이벤트(event)란?
오늘날 웹 페이지는 사용자와 수많은 상호작용을 하게 됩니다.

사용자는 마우스를 움직이거나, 요소를 클릭하거나, 텍스트 박스에 글을 쓰는 등 수많은 종류의 동작(action)을 수행합니다.



위에서 예를 든 사용자의 동작들이 모두 이벤트(event)를 발생시킵니다.

즉, 이벤트가 발생했다는 것은 웹 페이지에서 특정 동작이 발생하여, 웹 브라우저가 그 사실을 알려주는 것을 의미합니다.

이벤트 핸들러(event handler)
웹 페이지에서는 수많은 이벤트가 계속해서 발생합니다.

특정 요소에서 발생하는 이벤트를 처리하기 위해서는 이벤트 핸들러(event handler)라는 함수를 작성하여 연결해야만 합니다.

이벤트 핸들러가 연결된 특정 요소에서 지정된 타입의 이벤트가 발생하면, 웹 브라우저는 연결된 이벤트 핸들러를 실행합니다.

다음 예제는 이벤트 핸들러를 작성하여 연결한 예제입니다.
예제
$(function() {

    $("button").on({             // 모든 <button>요소에

        mouseenter: function() { // mouseenter 이벤트를 설정함.

            $("#text").append("마우스가 버튼 위로 진입했어요!<br>");

        },

        click: function() {      // click 이벤트를 설정함.

            $("#text").append("마우스가 버튼을 클릭했어요!<br>");

        },

        mouseleave: function() { // mouseleave 이벤트를 설정함.

            $("#text").append("마우스가 버튼 위에서 빠져나갔어요!<br>");

        }

    });

});

이벤트 객체(event object)
이벤트 핸들러 함수는 이벤트 객체(event object)를 인수로 전달받을 수 있습니다.

이렇게 전달받은 이벤트 객체를 이용하여 이벤트의 성질을 결정하거나, 이벤트의 기본 동작을 막을 수도 있습니다.

제이쿼리의 이벤트 객체는 W3C 표준 권고안을 따르는 이벤트 객체를 정규화한 것입니다.

 */
/****************************************************************************************************************************************************/

/*
이벤트의 처리
이벤트의 연결(event binding)
특정 요소에서 발생하는 이벤트를 처리하기 위해서는 이벤트 핸들러(event handler) 함수를 작성해야만 합니다.

이렇게 작성된 이벤트 핸들러를 특정 요소에 연결하는 것을 이벤트의 연결(event binding)이라고 합니다.



제이쿼리는 이벤트의 연결을 위한 다양한 방법을 제공합니다.



다음 예제는 id가 "btn"인 요소에 클릭(click) 이벤트 핸들러를 연결하는 다양한 방법입니다.

예제
1. $("#btn").click(function(event) { // 실행하고자 하는 제이쿼리 코드 });
2. $("#btn").bind("click", function(event) { // 실행하고자 하는 제이쿼리 코드 });
3. $("#btn").on("click", function(event) { // 실행하고자 하는 제이쿼리 코드 });
4. $("body").on({click: function(event) { // 실행하고자 하는 제이쿼리 코드 }}, "#btn");
5. $("body").on("click", "#btn", function(event) { // 실행하고자 하는 제이쿼리 코드 });

제이쿼리 1.7부터는 .bind()나 .click() 메소드를 사용해도, 내부적으로 .on() 메소드를 이용하여 이벤트 핸들러와 연결합니다.

예제
$(function() {

    $("body").on({          // <body>요소에

        click: function() { // click 이벤트가 발생했을 때

            $("#text").html("버튼을 클릭했습니다!");

        }

    }, "#btn");             // id가 "btn"인 요소에 이벤트 핸들러를 등록함.

});

이벤트 처리의 발전
제이쿼리의 발전에 따라 이벤트를 처리하는 방법 역시 변해 왔습니다.

제이쿼리 1.0에서는 .bind() 메소드를 사용하여 이벤트 핸들러를 등록했습니다.

그다음에는 .live() 메소드와 .delegate() 메소드를 거쳐, 현재는 .on() 메소드를 이용하여 이벤트를 처리하고 있습니다.

.on() 메소드
제이쿼리는 특정 요소에 이벤트를 연결(event binding)하기 위해 .on() 메소드를 사용합니다.

제이쿼리 1.7부터 소개된 .on() 메소드는 다음과 같은 특징을 가집니다.



1. 선택한 요소에 어떤 타입의 이벤트라도 연결할 수 있습니다.

2. 하나의 이벤트 핸들러에 여러 개의 이벤트를 동시에 연결할 수 있습니다.

3. 선택한 요소에 여러 개의 이벤트 핸들러와 여러 개의 이벤트를 같이 연결할 수 있습니다.

4. 사용자 지정 이벤트(custom event)를 위해 이벤트 핸들러로 데이터를 넘길 수 있습니다.

5. 차후에 다루게 될 요소를 이벤트에 연결할 수 있습니다.



.on() 메소드를 사용하면 하나의 이벤트 핸들러에 여러 개의 이벤트를 동시에 연결할 수 있습니다.

예제
$(function() {

    // 모든 <button>요소에 mouseenter와 mouseleave 이벤트를 설정함.

    $("button").on("mouseenter mouseleave", function() {

        $("#text").append("마우스가 버튼 위로 진입하거나 빠져나갔어요!<br>");

    });

});


또한, 하나의 요소에 여러 개의 이벤트 핸들러를 사용하여 여러 개의 이벤트를 같이 연결할 수도 있습니다.

예제
$(function() {

    $("button").on({             // 모든 <button>요소에

        mouseenter: function() { // mouseenter 이벤트를 설정함.

            $("#text").append("마우스가 버튼 위로 진입했어요!<br>");

        },

        click: function() {      // click 이벤트를 설정함.

            $("#text").append("마우스가 버튼을 클릭했어요!<br>");

        },

        mouseleave: function() { // mouseleave 이벤트를 설정함.

            $("#text").append("마우스가 버튼 위에서 빠져나갔어요!<br>");

        }

    });

});



.one() 메소드
.one() 메소드는 연결된 이벤트 핸들러가 한 번 실행되고 나서는, 더는 실행되지 않습니다.

또한, 같은 이벤트에 대해 연결된 이벤트 핸들러가 한 번 실행된 후에는 다른 이벤트 핸들러를 실행하고 싶을 때도 사용할 수 있습니다.

예제
$(function() {

    $("button").one("click", function() {

        // 모든 <button>요소가 처음 클릭됐을 때에만 실행됨.

        $("#text").append("첫 번째 클릭이에요!<br>");

        // 모든 <button>요소가 두 번째 클릭됐을 때부터는 이 이벤트 핸들러가 실행됨.

        $(this).click(function() {

            $("#text").append("이 버튼을 벌써 클릭했네요!<br>");

        });

    });

});

코딩연습 ▶



.one() 메소드는 .on() 메소드와 같은 인수를 전달받습니다.
따라서 여러 개의 이벤트 핸들러와 여러 개의 이벤트를 가질 수 있는 등 .on() 메소드와 같은 특징을 갖습니다.
.off() 메소드
.off() 메소드는 더는 사용하지 않는 이벤트와의 연결을 제거합니다.

예제
$(function() {

    $("#clickBtn").on("click", function() { // id가 "clickBtn"인 요소를 클릭했을 때 실행됨.

        $("#text").append("버튼을 클릭했어요!<br>");

    });

    $("#removeBtn").on("click", function() {

        $("#clickBtn").off("click");        // id가 "clickBtn"인 요소의 클릭 이벤트와의 연결을 제거함.

    });

});
 */

/****************************************************************************************************************************************************/

/*
이벤트의 위임
이벤트의 위임(event delegation)
제이쿼리는 이벤트의 위임을 통해 다수의 요소에 공통으로 적용되는 이벤트 핸들러를 공통된 조상 요소에 단 한 번만 연결하면 동작할 수 있도록 해줍니다.



다음 예제는 <ul>요소의 자식 요소 중 <a>요소에 대해 요소마다 각각 이벤트 핸들러를 직접 연결하는 예제입니다.

예제
$(function() {

    $("ul a").on("click", function(event) { // <ul>요소의 자식 요소 중 <a>요소를 클릭했을 때,

        event.preventDefault();             // <a>요소의 클릭시 기본 동작인 링크의 작동을 중지시킴.

        $("#text").append("이 링크는 동작하지 않습니다!<br>");

    });

});

코딩연습 ▶




요소마다 직접 등록된 이벤트 핸들러는 현재 존재하는 <a>요소에만 연결되며, 새롭게 추가되는 요소에는 연결되지 않습니다.

예제
$(function() {

    $("ul a").on("click", function(event) { // <ul>요소의 자식 요소 중 모든 <a>요소를 클릭했을 때,

        event.preventDefault();             // <a>요소의 클릭시 기본 동작인 링크의 작동을 중지시킴.

        $("#text").append("이 링크는 동작하지 않습니다!<br>");

    });

    $("button").one("click", function() {

        $("ul").append('<li><a href="/jquery/intro">jQuery</a></li>');

    });

});

코딩연습 ▶



하지만 위의 예제에 이벤트의 위임을 이용하면, 다음과 같이 작성할 수 있습니다.


예제
$(function() {

    $("ul").on("click", "a", function(event) {

        event.preventDefault(); // <a>요소의 클릭시 기본 동작인 링크의 작동을 중지시킴.

        $("#text").append("이 링크는 동작하지 않습니다!<br>");

    });

    $("button").one("click", function() {

        $("ul").append('<li><a href="/jquery/intro">jQuery</a></li>');

    });

});


.on() 메소드는 해당 요소에 첫 번째 인수로 전달받은 이벤트가 전파되었을 때, 그 이벤트를 발생한 요소가 두 번째 인수로 전달받은 선택자와 같은지를 검사합니다.

만약 이벤트가 발생한 요소와 두 번째 인수로 전달받은 선택자가 같으면, 연결된 이벤트 핸들러를 실행합니다.


이벤트의 위임을 이용하면 현재 존재하는 자손 요소뿐만 아니라, 나중에 추가되는 자손 요소까지도 모두 자동으로 연결됩니다.


이벤트의 전파(event propagation)
이벤트의 전파란 이벤트가 발생했을 때, 브라우저가 이벤트 핸들러를 실행시킬 대상 요소를 결정하는 과정입니다.

이벤트가 Document 객체나 HTML 문서의 요소에서 일어나면 대상 객체를 결정하기 위해 이벤트의 전파가 일어납니다.

이렇게 이벤트가 전파되는 과정을 이벤트 버블링(event bubbling)이라고 합니다.



이벤트 버블링은 이벤트가 발생한 요소부터 시작하여 DOM 트리를 따라 위쪽으로 올라가며 전파되는 과정을 의미합니다.

즉, 이벤트가 발생한 요소에 연결된 이벤트 핸들러가 실행된 후, 그 부모 요소에 연결된 핸들러가 실행됩니다.


또다시 그 부모 요소에 등록된 핸들러가 실행되며, 마지막에는 Document 객체까지 계속 전파됩니다.


이러한 전파를 통해 위와 같은 이벤트의 위임(event delegation)이 가능해집니다.


이벤트의 전파(propagation)에 대한 더 자세한 사항은 자바스크립트 이벤트 리스너 호출 수업에서 확인할 수 있습니다.


*/

/****************************************************************************************************************************************************/

/*
이벤트 메소드
이벤트 메소드
제이쿼리는 on() 메소드 이외에도 자바스크립트 이벤트와 관련된 다양한 메소드를 제공합니다.

이러한 이벤트 메소드는 이벤트가 발생하는 요소에 따라 다음과 같이 구분할 수 있습니다.


1. 마우스 이벤트와 관련된 메소드

2. 키보드 이벤트와 관련된 메소드

3. 입력 양식(form) 이벤트와 관련된 메소드

마우스 이벤트와 관련된 메소드
제이쿼리에서 제공하는 마우스 이벤트와 관련된 대표적인 메소드는 다음과 같습니다.



1. .click()

2. .dblclick()

3. .hover()

.dblclick() 메소드
.dblclick() 메소드는 자바스크립트의 "dblclick" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "dblclick" 이벤트를 발생시킵니다.



예제
$(function() {

    $("button").click(function() {    // 모든 <button>요소에 click 이벤트를 설정함.

        $("#clickText").css("color", "red");

        $("#dblclickText").css("color", "black");

    });

    $("button").dblclick(function() { // 모든 <button>요소에 dblclick 이벤트를 설정함.

        $("#dblclickText").css("color", "red");

        $("#clickText").css("color", "black");

    });

});

코딩연습 ▶


.hover() 메소드
.hover() 메소드는 자바스크립트의 "mouseenter"와 "mouseleave" 이벤트를 같이 이벤트 핸들러와 연결합니다.

예제
$(function() {

    $("button").hover(function() { // 모든 <button>요소에 hover 이벤트를 설정함.

        $("#text").append("마우스가 버튼 위로 진입하거나 빠져나갔어요!<br>");

    });

});

코딩연습 ▶

마우스 이벤트와 관련된 메소드
메소드	설명
.click()	자바스크립트의 "click" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "click" 이벤트를 발생시킴.
.dblclick()	자바스크립트의 "dblclick" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "dblclick" 이벤트를 발생시킴.
.hover()	자바스크립트의 "mouseenter"와 "mouseleave" 이벤트를 같이 인벤트 핸들러와 연결함.
.mousedown()	자바스크립트의 "mousedown" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "mousedown" 이벤트를 발생시킴.
.mouseenter()	해당 요소 위로 마우스가 진입할 때 발생하는 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 마우스 진입 이벤트를 발생시킴.
.mouseleave()

해당 요소에서 마우스가 빠져나갈 때 발생하는 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 마우스가 빠져나가는 이벤트를 발생시킴.
.mousemove()	자바스크립트의 "mousemove" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "mousemove" 이벤트를 발생시킴.
.mouseout()	자바스크립트의 "mouseout" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "mouseout" 이벤트를 발생시킴.
.mouseover()	자바스크립트의 "mouseover" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "mouseover" 이벤트를 발생시킴.
.mouseup()	자바스크립트의 "mouseup" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "mouseup" 이벤트를 발생시킴.
.keypress() 메소드
.keypress() 메소드는 자바스크립트의 "keypress" 이벤트와 이벤트 핸들러를 연결합니다.



다음 예제는 <input>요소에 키보드로 문자를 입력할 때마다 입력한 문자에 해당하는 유니코드(unicode) 숫자를 출력하는 예제입니다.


예제
$(function() {

    // 아이디가 "key"인 요소에 keypress 이벤트를 설정함.

    $("#key").on("keypress", function(event) {

        $("#str").html(event.type + " : " + event.which);

    });

});

코딩연습 ▶



Shift, Esc, Delete와 같은 화면에 출력되지 않는 키(modifier and non-printing keys)들은 "keydown" 이벤트는 발생시키지만, "keypress" 이벤트는 발생시키지 않습니다.
키보드 이벤트와 관련된 메소드
메소드	설명
.keydown()	자바스크립트의 "keydown" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "keydown" 이벤트를 발생시킴.
.keyup()	자바스크립트의 "keyup" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "keyup" 이벤트를 발생시킴.
.keypress()	자바스크립트의 "keypress" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "keypress" 이벤트를 발생시킴.
.focusin() 메소드와 .focusout() 메소드
.focusin() 메소드는 자바스크립트의 "focusin" 이벤트와 이벤트 핸들러를 연결합니다.

또한, .focusout() 메소드는 자바스크립트의 "focusout" 이벤트와 이벤트 핸들러를 연결합니다.


예제
$(function() {

    // 아이디가 "focus"인 요소에 focusin 이벤트를 설정함.

    $("#focus").on("focusin", function(event) {

        $(this).css("backgroundColor", "yellow");

    });

    // 아이디가 "focus"인 요소에 focusout 이벤트를 설정함.

    $("#focus").on("focusout", function(event) {

        $(this).css("backgroundColor", "white");

    });

});

코딩연습 ▶



this 키워드는 현재 선택되어 있는 요소 그 자체를 가리킵니다.
입력 양식 이벤트와 관련된 메소드
메소드	설명
.blur()	자바스크립트의 "blur" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "blur" 이벤트를 발생시킴.
.change()	자바스크립트의 "change" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "change" 이벤트를 발생시킴.
.select()	자바스크립트의 "select" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "select" 이벤트를 발생시킴.
.submit()	자바스크립트의 "submit" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "submit" 이벤트를 발생시킴.
.focus()	자바스크립트의 "focus" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "focus" 이벤트를 발생시킴.
.focusin()

"focusin" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "focusin" 이벤트를 발생시킴.
.focusout()	"focusout" 이벤트와 이벤트 핸들러를 연결하거나, 해당 요소에 "focusout" 이벤트를 발생시킴.
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/
/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/

/*
*/

/****************************************************************************************************************************************************/
